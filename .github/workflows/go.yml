name: Build and Release

on:
  push:
    branches: [ main ] # Только main, исключаем master если не используется
    # tags: [ 'v*' ] # Убираем теги из триггера push, если хотите, чтобы latest создавался *только* для main
  pull_request:
    branches: [ main ]

jobs:
  # Linux builds
  build-linux-amd64:
    name: Build Linux AMD64
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        cache: true

    - name: Get dependencies
      run: |
        go mod download
        go mod tidy

    - name: Build
      run: |
        GOOS=linux GOARCH=amd64 go build -v -o gocl .

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gocl-linux-amd64
        path: gocl

  build-linux-arm64:
    name: Build Linux ARM64
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        cache: true

    - name: Get dependencies
      run: |
        go mod download
        go mod tidy

    - name: Build
      run: |
        GOOS=linux GOARCH=arm64 go build -v -o gocl .

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gocl-linux-arm64
        path: gocl

  # Windows builds
  build-windows-amd64:
    name: Build Windows AMD64
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        cache: true

    - name: Get dependencies
      run: |
        go mod download
        go mod tidy

    - name: Build
      run: |
        go build -v -o gocl.exe
      env:
        GOOS: windows
        GOARCH: amd64

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gocl-windows-amd64
        path: gocl.exe

  # macOS builds
  build-darwin-amd64:
    name: Build macOS AMD64
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.19'
        cache: true

    - name: Get dependencies
      run: |
        go mod download
        go mod tidy

    - name: Build
      run: |
        GOOS=darwin GOARCH=amd64 go build -v -o gocl .

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gocl-darwin-amd64
        path: gocl

  build-darwin-arm64:
    name: Build macOS ARM64
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.19'
        cache: true

    - name: Get dependencies
      run: |
        go mod download
        go mod tidy

    - name: Build
      run: |
        GOOS=darwin GOARCH=arm64 go build -v -o gocl .

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gocl-darwin-arm64
        path: gocl

  # Other Unix-like systems
  build-solaris-amd64:
    name: Build Solaris AMD64
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        cache: true

    - name: Get dependencies
      run: |
        go mod download
        go mod tidy

    - name: Build
      run: |
        GOOS=solaris GOARCH=amd64 go build -v -o gocl .

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gocl-solaris-amd64
        path: gocl

  build-freebsd-amd64:
    name: Build FreeBSD AMD64
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        cache: true

    - name: Get dependencies
      run: |
        go mod download
        go mod tidy

    - name: Build
      run: |
        GOOS=freebsd GOARCH=amd64 go build -v -o gocl .

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gocl-freebsd-amd64
        path: gocl

  # Джоба release-latest будет запускаться всегда, независимо от статуса предшествующих джобов,
  # но только если хотя бы одна из них была успешной.
  release-latest:
    name: Create/Update Latest Release
    runs-on: ubuntu-latest
    # Запускаем всегда при пуше в main
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for all build jobs to complete
        id: wait_builds
        run: |
          RUN_ID=${{ github.run_id }}
          REPO=${{ github.repository }}
          TIMEOUT=600 # 10 минут
          INTERVAL=15
          ELAPSED=0
          
          # Определяем ожидаемые джобы сборки (те, что начинаются с "Build ")
          # Мы можем получить их из контекста workflow или хардкодом, если знаем точно
          # Для простоты предположим, что мы знаем их имена из workflow файла
          # Но в реальности лучше получить их программно
          
          echo "Waiting for build jobs to complete in run $RUN_ID for repo $REPO"
          echo "This job will wait up to $TIMEOUT seconds."
          
          while [ $ELAPSED -lt $TIMEOUT ]; do
            # Получаем список всех джобов, исключая текущую
            JOBS_JSON=$(gh api "/repos/$REPO/actions/runs/$RUN_ID/jobs" \
              --jq ".jobs[] | select(.name != \"Create/Update Latest Release\") | {name: .name, status: .status, conclusion: .conclusion}")
            
            # Считаем общее количество джобов сборки (начинающихся с "Build")
            TOTAL_BUILD_JOBS=$(echo "$JOBS_JSON" | jq -r 'select(.name | startswith("Build")) | .name' | wc -l)
            
            # Считаем количество завершенных джобов сборки
            COMPLETED_BUILD_JOBS=$(echo "$JOBS_JSON" | jq -r 'select(.status == "completed") | select(.name | startswith("Build")) | .name' | wc -l)
            
            # Считаем количество успешно завершенных джобов сборки
            SUCCESSFUL_BUILD_JOBS=$(echo "$JOBS_JSON" | jq -r 'select(.status == "completed" and .conclusion == "success") | select(.name | startswith("Build")) | .name' | wc -l)
            
            echo "Build jobs: $COMPLETED_BUILD_JOBS completed out of $TOTAL_BUILD_JOBS total. Successful: $SUCCESSFUL_BUILD_JOBS"
            
            # Если все джобы сборки завершены
            if [ "$TOTAL_BUILD_JOBS" -gt 0 ] && [ "$COMPLETED_BUILD_JOBS" -eq "$TOTAL_BUILD_JOBS" ]; then
              echo "All $TOTAL_BUILD_JOBS build jobs have completed."
              if [ "$SUCCESSFUL_BUILD_JOBS" -gt 0 ]; then
                echo "At least $SUCCESSFUL_BUILD_JOBS build job(s) succeeded."
                echo "all_builds_completed=true" >> $GITHUB_OUTPUT
                echo "at_least_one_build_succeeded=true" >> $GITHUB_OUTPUT
              else
                echo "No build jobs succeeded."
                echo "all_builds_completed=true" >> $GITHUB_OUTPUT
                echo "at_least_one_build_succeeded=false" >> $GITHUB_OUTPUT
              fi
              exit 0
            else
              echo "Waiting for remaining $((TOTAL_BUILD_JOBS - COMPLETED_BUILD_JOBS)) build job(s) to complete..."
            fi
            
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done
          
          echo "Timeout reached. Not all build jobs completed in time."
          echo "all_builds_completed=false" >> $GITHUB_OUTPUT
          echo "at_least_one_build_succeeded=false" >> $GITHUB_OUTPUT
          exit 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fail if no builds succeeded or timeout
        if: steps.wait_builds.outputs.all_builds_completed == 'true' && steps.wait_builds.outputs.at_least_one_build_succeeded == 'false'
        run: |
          echo "All build jobs completed, but none succeeded. Aborting release creation."
          exit 1
          
      - name: Fail on timeout
        if: steps.wait_builds.outputs.all_builds_completed == 'false'
        run: |
          echo "Timeout reached while waiting for build jobs to complete. Aborting release creation."
          exit 1

      - name: Download all artifacts
        if: steps.wait_builds.outputs.at_least_one_build_succeeded == 'true'
        uses: actions/download-artifact@v4

      - name: Create release artifacts
        if: steps.wait_builds.outputs.at_least_one_build_succeeded == 'true'
        run: |
          # Create release directory
          mkdir -p release
          
          # Process each artifact directory
          shopt -s nullglob # Handle case where no gocl-* dirs exist
          for dir in gocl-*/; do
            if [ -d "$dir" ]; then
              # Get platform info from directory name
              platform=$(echo "$dir" | sed 's/\/$//' | sed 's/gocl-//')
              
              # Create archive based on platform
              if [[ "$platform" == *"windows"* ]]; then
                # Windows - create ZIP
                (cd "$dir" && zip -r "../release/gocl-latest-$platform.zip" .)
              else
                # Unix-like systems - create tar.gz
                (cd "$dir" && tar -czf "../release/gocl-latest-$platform.tar.gz" .)
              fi
            fi
          done
          shopt -u nullglob

      - name: Delete existing latest release assets (if any)
        if: steps.wait_builds.outputs.at_least_one_build_succeeded == 'true'
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: latest
          assets: '*'
          # fail_on_error: false # Убираем недопустимый параметр
          fail-if-no-release: false # Добавляем правильный параметр

      - name: Create or Update Release
        if: steps.wait_builds.outputs.at_least_one_build_succeeded == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: latest
          name: Latest Development Build
          body: |
            Latest automated build from the main branch.
            Commit: ${{ github.sha }}
            Build time: $(date -u)
          files: |
            release/gocl-latest-*.zip
            release/gocl-latest-*.tar.gz
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}