name: Build and Release

on:
  push:
    branches: [ main ] # Только main, исключаем master если не используется
    # tags: [ 'v*' ] # Убираем теги из триггера push, если хотите, чтобы latest создавался *только* для main
  pull_request:
    branches: [ main ]

jobs:
  # Linux builds
  build-linux-amd64:
    name: Build Linux AMD64
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        cache: true

    - name: Get dependencies
      run: |
        go mod download
        go mod tidy

    - name: Build
      run: |
        GOOS=linux GOARCH=amd64 go build -v -o gocl .

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gocl-linux-amd64
        path: gocl

  build-linux-arm64:
    name: Build Linux ARM64
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        cache: true

    - name: Get dependencies
      run: |
        go mod download
        go mod tidy

    - name: Build
      run: |
        GOOS=linux GOARCH=arm64 go build -v -o gocl .

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gocl-linux-arm64
        path: gocl

  build-linux-386:
    name: Build Linux 386
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        cache: true

    - name: Get dependencies
      run: |
        go mod download
        go mod tidy

    - name: Build
      run: |
        GOOS=linux GOARCH=386 go build -v -o gocl .

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gocl-linux-386
        path: gocl

  # Windows builds
  build-windows-amd64:
    name: Build Windows AMD64
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        cache: true

    - name: Get dependencies
      run: |
        go mod download
        go mod tidy

    - name: Build
      run: |
        go build -v -o gocl.exe
      env:
        GOOS: windows
        GOARCH: amd64

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gocl-windows-amd64
        path: gocl.exe

  build-windows-386:
    name: Build Windows 386
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        cache: true

    - name: Get dependencies
      run: |
        go mod download
        go mod tidy

    - name: Build
      run: |
        go build -v -o gocl.exe
      env:
        GOOS: windows
        GOARCH: 386

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gocl-windows-386
        path: gocl.exe

  # macOS builds
  build-darwin-amd64:
    name: Build macOS AMD64
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        cache: true

    - name: Get dependencies
      run: |
        go mod download
        go mod tidy

    - name: Build
      run: |
        GOOS=darwin GOARCH=amd64 go build -v -o gocl .

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gocl-darwin-amd64
        path: gocl

  build-darwin-arm64:
    name: Build macOS ARM64
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        cache: true

    - name: Get dependencies
      run: |
        go mod download
        go mod tidy

    - name: Build
      run: |
        GOOS=darwin GOARCH=arm64 go build -v -o gocl .

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gocl-darwin-arm64
        path: gocl

  # Other Unix-like systems
  build-solaris-amd64:
    name: Build Solaris AMD64
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        cache: true

    - name: Get dependencies
      run: |
        go mod download
        go mod tidy

    - name: Build
      run: |
        GOOS=solaris GOARCH=amd64 go build -v -o gocl .

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gocl-solaris-amd64
        path: gocl

  build-freebsd-amd64:
    name: Build FreeBSD AMD64
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        cache: true

    - name: Get dependencies
      run: |
        go mod download
        go mod tidy

    - name: Build
      run: |
        GOOS=freebsd GOARCH=amd64 go build -v -o gocl .

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gocl-freebsd-amd64
        path: gocl

  release-latest:
    name: Create/Update Latest Release
    needs: 
      - build-linux-amd64
      - build-linux-arm64
      - build-linux-386
      - build-windows-amd64
      - build-windows-386
      - build-darwin-amd64
      - build-darwin-arm64
      - build-solaris-amd64
      - build-freebsd-amd64
    runs-on: ubuntu-latest
    # Запускаем только при пуше в main
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create release artifacts
      run: |
        # Create release directory
        mkdir -p release
        
        # Process each artifact directory
        for dir in gocl-*; do
          if [ -d "$dir" ]; then
            # Get platform info from directory name
            platform=$(echo "$dir" | sed 's/gocl-//')
            
            # Create archive based on platform
            if [[ "$platform" == *"windows"* ]]; then
              # Windows - create ZIP
              (cd "$dir" && zip -r "../release/gocl-latest-$platform.zip" .)
            else
              # Unix-like systems - create tar.gz
              (cd "$dir" && tar -czf "../release/gocl-latest-$platform.tar.gz" .)
            fi
          fi
        done

    - name: Delete existing latest release assets (if any)
      uses: mknejp/delete-release-assets@v1
      with:
        # Токен нужен с правами на удаление
        token: ${{ secrets.GITHUB_TOKEN }}
        # Ищем релиз с тегом 'latest'
        tag: latest
        # Удаляем все существующие ассеты
        assets: '*'
        # Не фейлим, если релиз не найден
        fail_on_error: false

    - name: Create or Update Release
      uses: softprops/action-gh-release@v1
      with:
        # Используем фиксированный тег 'latest'
        tag_name: latest
        name: Latest Development Build
        body: |
          Latest automated build from the main branch.
          Commit: ${{ github.sha }}
          Build time: $(date -u)
        # Файлы для загрузки
        files: |
          release/gocl-latest-*.zip
          release/gocl-latest-*.tar.gz
        # Перезаписываем, если релиз уже существует
        draft: false
        prerelease: true # Отмечаем как предварительный релиз
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}